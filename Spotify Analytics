--In this project i used Spotify data that I downloaded from Kaggle. 
I created a table and inserted the Spotify Data .csv into it to perform analytics useing SQL.--

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

--#1. What was the most popular song on Spotify in 2021? Who was the artist and what key is it in?--
SELECT track_name, artist_name, song_key FROM BIT_DB.Spotifydata
ORDER BY popularity DESC LIMIT 1
;

--#2. What is the most popular key that the top 50 songs ar in?--
SELECT song_key, COUNT(track_name) AS Songs_in_key FROM BIT_DB.Spotifydata
GROUP BY song_key
HAVING song_mode = 1
ORDER BY Songs_in_key DESC LIMIT 1
;

--#3. What is the average tempo of the high energy songs?--
SELECT AVG(ROUND(tempo)) Average_Tempo, 
CASE
WHEN energy >= 0.8 THEN "high_energy"
ELSE "N/A"
END AS "energy_degree"
FROM BIT_DB.Spotifydata
WHERE energy_degree = "high_energy"
GROUP BY energy_degree
;

--#4. What are the top 10 songs by popularity, and the artists they are by?--
SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10
;

--#5. does the acousticness of songs effect its average danceability?--
SELECT 
CASE
WHEN acousticness > 0.6 THEN "most_acoustic"
WHEN acousticness > 0.4 THEN "more_acoustic"
WHEN acousticness > 0.2 THEN "less_acoustic"
ELSE "minimal_acoustic"
END AS acousticness_group
, AVG(danceability)
FROM BIT_DB.spotifydata
GROUP BY acousticness_group
;

--#6. What are the artists with an average popularity of 90 or more, and label them as "Top Star".--
WITH avg_pop_CTE AS (
SELECT artist_name, avg(popularity) AS avg_popularity FROM Spotifydata
GROUP BY artist_name)
SELECT Artist_name, avg_popularity, 'Top Star' AS tag FROM avg_pop_CTE
WHERE avg_popularity >= 90 
;

